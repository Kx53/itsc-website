---
import Layout from "@/layouts/Layout.astro";
import * as m from "@/paraglide/messages";
import ResourceHero from "@/components/resource/ResourceHero.astro";
import ResourceSearchAndFilter from "@/components/resource/ResourceSearchAndFilter.astro";
import ResourceTabsWrapper from "@/components/resource/ResourceTabsWrapper.astro";
import ResourceCardGrid from "@/components/resource/ResourceCardGrid.astro";
import ResourceTable from "@/components/resource/ResourceTable.astro";

const pageTitle = m.resource_page_title() + " - " + m.site_title();

// Mock data for demonstration
const recommendedDocs = [
  {
    title: "คู่มือการใช้งานระบบ E-mail สำหรับนักศึกษา",
    description: "คู่มือการใช้งานระบบอีเมลสำหรับนักศึกษาและบุคลากร",
    tag: "คู่มือการใช้งาน",
    fileType: "PDF",
    size: "2.5 MB",
    date: "15 มิถุนายน 2567",
    viewUrl: "#",
  },
  {
    title: "วิธีการตั้งค่า VPN",
    description: "คำแนะนำในการตั้งค่า VPN สำหรับการเข้าถึงระบบจากภายนอก",
    tag: "คู่มือติดตั้ง",
    fileType: "PDF",
    size: "3.2 MB",
    date: "5 มิถุนายน 2567",
    viewUrl: "#",
  },
];

const allDocs = [
  {
    title: "คู่มือการใช้งานระบบ E-mail สำหรับนักศึกษา",
    description: "คู่มือการใช้งานระบบอีเมลสำหรับนักศึกษาและบุคลากร",
    tag: "คู่มือการใช้งาน",
    fileType: "PDF",
    size: "2.5 MB",
    date: "15 มิถุนายน 2567",
    viewUrl: "#",
  },
  {
    title: "นโยบายความปลอดภัยทางไซเบอร์",
    description: "นโยบายและแนวทางปฏิบัติด้านความปลอดภัยทางไซเบอร์",
    tag: "นโยบาย",
    fileType: "PDF",
    size: "1.8 MB",
    date: "10 มิถุนายน 2567",
    viewUrl: "#",
  },
  {
    title: "แบบฟอร์มขออนุญาตใช้งานระบบ",
    description: "แบบฟอร์มสำหรับยื่นขออนุญาตเข้าใช้งานระบบสารสนเทศ",
    tag: "แบบฟอร์ม",
    fileType: "DOCX",
    size: "0.5 MB",
    date: "8 มิถุนายน 2567",
    viewUrl: "#",
  },
  {
    title: "วิธีการตั้งค่า VPN",
    description: "คำแนะนำในการตั้งค่า VPN สำหรับการเข้าถึงระบบจากภายนอก",
    tag: "คู่มือติดตั้ง",
    fileType: "PDF",
    size: "3.2 MB",
    date: "5 มิถุนายน 2567",
    viewUrl: "#",
  },
  {
    title: "รายงานประจำปี 2567",
    description: "รายงานสรุปการดำเนินงานด้านเทคโนโลยีสารสนเทศประจำปี 2567",
    tag: "รายงาน",
    fileType: "PDF",
    size: "5.0 MB",
    date: "1 มิถุนายน 2567",
    viewUrl: "#",
  },
];
---

<Layout title={pageTitle}>
  <main>
    <div class="container mx-auto px-4">
      <ResourceHero />
      <ResourceSearchAndFilter />
      <ResourceTabsWrapper />

      <!-- Card View -->
      <div id="card-view">
        <ResourceCardGrid
          title={m.resource_recommended_docs()}
          documents={recommendedDocs}
        />
        <ResourceCardGrid title={m.resource_all_docs()} documents={allDocs} />
      </div>

      <!-- Table View (initially hidden) -->
      <div id="table-view" class="hidden">
        <ResourceTable
          title={m.resource_recommended_docs()}
          documents={recommendedDocs}
        />
        <ResourceTable title={m.resource_all_docs()} documents={allDocs} />
      </div>
    </div>
  </main>
</Layout>

<script>
  document.addEventListener("astro:page-load", () => {
    // --- View Switcher Logic ---
    const cardView = document.getElementById("card-view");
    const tableView = document.getElementById("table-view");

    document.addEventListener("view-change", (event) => {
      const customEvent = event as CustomEvent;
      if (!customEvent.detail) return;
      const view = customEvent.detail.view;

      if (view === "card") {
        cardView?.classList.remove("hidden");
        tableView?.classList.add("hidden");
      } else if (view === "table") {
        cardView?.classList.add("hidden");
        tableView?.classList.remove("hidden");
      }
    });

    // --- Search and Filter Logic ---
    const searchInput = document.getElementById(
      "resource-search"
    ) as HTMLInputElement;
    const filterButtonsContainer = document.getElementById(
      "resource-filter-buttons"
    );
    const resourceItems = document.querySelectorAll(".resource-item");

    if (!searchInput || !filterButtonsContainer || resourceItems.length === 0) {
      return; // Exit if essential elements are not found
    }

    let currentFilter = "all";

    const filterAndSearch = () => {
      const searchTerm = searchInput.value.toLowerCase();

      resourceItems.forEach((item) => {
        const element = item as HTMLElement;
        const title = element.dataset.title?.toLowerCase() || "";
        const description = element.dataset.description?.toLowerCase() || "";
        const tag = element.dataset.tag || "";

        const matchesSearch =
          title.includes(searchTerm) || description.includes(searchTerm);

        let matchesFilter = false;
        if (currentFilter === "all") {
          matchesFilter = true;
        } else if (currentFilter === "คู่มือ") {
          matchesFilter = tag.includes("คู่มือ");
        } else {
          matchesFilter = tag === currentFilter;
        }

        if (matchesSearch && matchesFilter) {
          element.style.display = "";
        } else {
          element.style.display = "none";
        }
      });
    };

    // Event listener for search input
    searchInput.addEventListener("input", filterAndSearch);

    // Event listener for filter buttons
    filterButtonsContainer.addEventListener("click", (event) => {
      const target = event.target as HTMLElement;
      const button = target.closest("button");

      if (button && button.dataset.filter) {
        const activeButton =
          filterButtonsContainer.querySelector(".btn-primary");
        if (activeButton) {
          activeButton.classList.remove("btn-primary");
        }
        button.classList.add("btn-primary");

        currentFilter = button.dataset.filter;
        filterAndSearch();
      }
    });

    // Initial filter on page load
    filterAndSearch();
  });
</script>
