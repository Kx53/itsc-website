---
// src/components/resource/ResourceCard.astro
import IconifyIcon from "../IconifyIcon.vue";
import * as m from "@/paraglide/messages";

export interface Props {
  title: string;
  description: string;
  tag: string;
  fileType: string;
  date: string;
  size: string;
  viewUrl: string;
}

const { title, description, tag, fileType, date, size, viewUrl } = Astro.props;
---

<div
  class="rainbow-border-wrapper h-full resource-item"
  data-title={title}
  data-tag={tag}
  data-description={description}
>
  <div
    class="card h-full bg-base-200 shadow-none border border-transparent transition-colors duration-300"
  >
    <div class="card-body p-6">
      <div class="flex items-start gap-4">
        <IconifyIcon
          icon="material-symbols:docs"
          className="h-8 w-8 text-primary mt-1 flex-shrink-0"
          client:visible
        />
        <div class="flex-grow">
          <div class="badge badge-accent mb-2">{tag}</div>
          <h2 class="card-title mb-2 text-base-content">{title}</h2>
          <p class="text-base-content/70 text-sm mb-4">{description}</p>
        </div>
      </div>
      <div
        class="card-actions justify-between items-center mt-auto pt-4 border-t border-base-content/10"
      >
        <div class="flex items-center gap-4 text-sm text-base-content/60">
          <div class="flex items-center gap-1">
            <IconifyIcon
              icon="mdi:calendar-blank"
              className="h-4 w-4"
              client:visible
            />
            <span>{date}</span>
          </div>
          <div class="flex items-center gap-1">
            <IconifyIcon
              icon="mdi:file-document-outline"
              className="h-4 w-4"
              client:visible
            />
            <span>{size}</span>
          </div>
        </div>
        <a href={viewUrl} class="btn btn-primary">
          {m.resource_card_view_button()}
          <IconifyIcon icon="mdi:eye" className="h-5 w-5" client:visible />
        </a>
      </div>
    </div>
  </div>
</div>

<style>
  @property --angle {
    syntax: "<angle>";
    initial-value: 0deg;
    inherits: false;
  }

  .rainbow-border-wrapper {
    position: relative;
    z-index: 1;
  }

  .rainbow-border-wrapper::before,
  .rainbow-border-wrapper::after {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: -1;
    width: 100%;
    height: 100%;
    border-radius: 1rem; /* Corresponds to card's rounded-box */
    background-image: conic-gradient(
      from var(--angle),
      #ff4545,
      #00ff99,
      #006aff,
      #ff0095,
      #ff4545
    );
    opacity: 0;
    transition: opacity 300ms ease-in-out;
    animation: 3s spin linear infinite;
  }

  .rainbow-border-wrapper::before {
    filter: blur(0.5rem);
    width: calc(100% + 8px);
    height: calc(100% + 8px);
  }

  .rainbow-border-wrapper:hover::after {
    opacity: 1;
  }

  .rainbow-border-wrapper:hover::before {
    opacity: 0.75;
  }

  .rainbow-border-wrapper:hover .card {
    border-color: transparent; /* Hide original border on hover */
  }

  @keyframes spin {
    from {
      --angle: 0deg;
    }
    to {
      --angle: 360deg;
    }
  }
</style>
