---
import * as m from "@/paraglide/messages";
import SearchBox from "@/components/shared/SearchBox.astro";

export interface Props {
  categories?: Array<{
    id: string;
    label: string;
    active?: boolean;
  }>;
  onSearch?: string;
  onCategorySelect?: string;
}

const {
  categories = [
    { id: "category1", label: "หมวดหมู่1", active: false },
    { id: "category2", label: "หมวดหมู่2", active: false },
    { id: "category3", label: "หมวดหมู่3", active: false },
    { id: "category4", label: "หมวดหมู่4", active: false },
    { id: "category5", label: "หมวดหมู่5", active: false },
  ],
} = Astro.props;
---

<div class="news-filter-section py-8">
  <div class="max-w-7xl mx-auto px-6">
    <!-- Search Bar -->
    <div class="flex justify-center mb-8">
      <SearchBox id="news-search" />
    </div>

    <!-- Category Filter Buttons -->
    <div class="flex flex-wrap justify-center gap-4">
      {
        categories.map((category) => (
          <button
            class={`btn rounded-xl px-4 py-2 text-sm md:text-base font-normal transition-all duration-200 ${
              category.active
                ? "bg-primary text-primary-content hover:bg-primary/90"
                : "bg-base-200 text-base-content hover:bg-base-300"
            }`}
            data-category-id={category.id}
            data-category-active={category.active}
          >
            {category.label}
          </button>
        ))
      }
    </div>
  </div>
</div>

<script>
  // Handle search functionality
  const searchInput = document.getElementById(
    "news-search"
  ) as HTMLInputElement;
  if (searchInput) {
    searchInput.addEventListener("input", (e) => {
      const target = e.target as HTMLInputElement;
      const searchTerm = target.value.toLowerCase();

      // Dispatch custom event for search
      document.dispatchEvent(
        new CustomEvent("newsSearch", {
          detail: { searchTerm },
        })
      );
    });
  }

  // Handle category filter functionality
  const categoryButtons = document.querySelectorAll("[data-category-id]");
  categoryButtons.forEach((button) => {
    button.addEventListener("click", (e) => {
      const target = e.target as HTMLButtonElement;
      const categoryId = target.dataset.categoryId;
      const isCurrentlyActive = target.dataset.categoryActive === "true";

      // Toggle active state
      const newActiveState = !isCurrentlyActive;
      target.dataset.categoryActive = newActiveState.toString();

      // Update button styling
      if (newActiveState) {
        target.className = target.className.replace(
          "bg-base-200 text-base-content hover:bg-base-300",
          "bg-primary text-primary-content hover:bg-primary/90"
        );
      } else {
        target.className = target.className.replace(
          "bg-primary text-primary-content hover:bg-primary/90",
          "bg-base-200 text-base-content hover:bg-base-300"
        );
      }

      // Dispatch custom event for category selection
      document.dispatchEvent(
        new CustomEvent("newsCategoryFilter", {
          detail: { categoryId, active: newActiveState },
        })
      );
    });
  });

  // Handle Astro page transitions
  document.addEventListener("astro:page-load", () => {
    // Re-initialize event listeners if needed
    console.log("News filter initialized");
  });
</script>

<style>
  .input-group .input:focus-within {
    outline: 2px solid hsl(var(--p));
    outline-offset: 2px;
  }

  @media (max-width: 768px) {
    .news-filter-section .max-w-md {
      max-width: 100%;
    }

    .news-filter-section .flex-wrap {
      justify-content: center;
    }

    .news-filter-section .btn {
      flex: 1;
      min-width: 120px;
      max-width: 150px;
    }
  }
</style>
